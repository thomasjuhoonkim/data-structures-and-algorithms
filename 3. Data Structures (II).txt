Linked List Data Structure:
    - A linear data structrue that includes a series of connected nodes.
    - Each node stores the data and the address of the next node.
    Example: Head -> data|next -> data|next -> NULL
    - Address of first node is called HEAD
    - Last node is a NULL pointer
    - Linked lists can be of multiple types:
        - Singly
        - Doubly
        - Circular linked lists
    - This article will focus on singly linked lists.
    - Like a game of treasure hunt: each clue includes info about next clue.

    Representation of Linked List:
        - Each node consists of:
            - A data item,
            - An address of another node
        - Wrap both the data item and the next node reference in a struct as:
            struct node
            {
                int data;
                struct node *next;
            };
        - Each struct node has a data item and a pointer to another struct node.
        - Create a simple linked list with three items to understand how it works.
            /* Initialize nodes */
            struct node *head;
            struct node *one = NULL;
            struct node *two = NULL;
            struct node *three = NULL;

            /* Allocate memory */
            one = malloc(sizeof(struct node));
            two = malloc(sizeof(struct node));
            three = malloc(sizeof(struct node));

            /* Assign data values */
            one->data = 1;
            two->data = 2;
            three->data=3;

            /* Connect nodes */
            one->next = two;
            two->next = three;
            three->next = NULL;

            /* Save address of first node in head */
            head = one;
        - Power of linked list comes from ability to break chain and rejoin
        Example: if you wanted to put an element 4 between 1 and 2:
            1. Create a new struct node and allocate memory to it.
            2. Add its data value as 4
            3. Point its next pointer to the struct node containing 2 as the data value
            4. Change the next pointer of "1" to the node we just created
        - Doing something similar in an array would require shifting positions of elements.
        - In python and java, linked lists can be implemented using classes.
    
    Linked List Utility:
    - Linked lists are a great way to learn how pointers work.
    - By learning how to manipulate linked lists,
    - you can prepare to learn more advanced data structures like graphs and trees.

    Linked List Implementation: check implementation examples

    Linked List Complexity:
        Time Complexity:
            Search:
                Worst Case: O(n)
                Average Case: O(n)
            Insert:
                Worst Case: O(1)
                Average Case: O(1)
            Deletion:
                Worst Case: O(1)
                Average Case: O(1)
        
        Space Complexity: O(n)
    
    Linked List Applciations:
        - Dynamic memory allocation
        - Implemented in stack and queue
        - In undo funcionality of softwares
        - Hash tables, graphs

Linked List Operations:
    - There are various operations possible on linked lists.
    Some operations:
        - Traversal
        - Insertion
        - Deletion
        - Search
        - Sort
    - Things to remember about linked lists
        - head points to the first node of the linked list
        - next pointer of the last node is NULL meaning the end has been reached
    - Node structure of following linked lists:
        struct node {
            int data;
            struct node *next;
        };

Traverse a Linked List
    - Displaying contents of a linked list is simple
    - Move temp node to the next one and display its contents
    - When temp is NULL, we know that we have reached the end of the linked list
      so we get out of the while loop.
    struct node *temp = head;
    printf("\n\nList elements are - \n");
        while(temp != NULL) {
        printf("%d --->",temp->data);
        temp = temp->next;
    }

Insert Elements to a Linked List
    - You can add elements to either the beginning, middle, or end of the linked list.
    
    1. Insert at the beginning
        - Allocate memory for a new node
        - Store data
        - Change next of new node to point to head
        - Change head to point to recently created node
        struct node *newNode;
        newNode = malloc(sizeof(struct node));
        newNode->data = 4;
        newNode->next = head;
        head = newNode;
    
    2. Insert at the End
        - Allocate memory for a new node
        - Store data
        - Traverse to last node
        - Change next of last node to recently created node
        struct node *newNode;
        newNode = malloc(sizeof(struct node));
        newNode->data = 4;
        newNode->next = NULL;

        struct node *temp = head;
        while(temp->next != NULL){
            temp = temp->next;
        }
        temp->next = newNode;
    
    3. Insert at the Middle
        - Allocate memeory and store dat afor new node
        - Traverse to node just before the required position of new node
        - Change next pointers to include new node in between
        struct node *newNode;
        newNode = malloc(sizeof(struct node));
        newNode->data = 4;

        struct node *temp = head;

        for(int i=2; i < position; i++) {
            if(temp->next != NULL) {
                temp = temp->next;
            }
        }
        newNode->next = temp->next;
        temp->next = newNode;
    
Delete from a Linked List:
    - You can delete from the beginning, end, or from a particular position.

    1. Delete from beginning
        - Point head to the second node
        head = head->next;
    
    2. Delete from end
        - Traverse to second last element
        - Change its next pointer to null
        struct node* temp = head;
        while(temp->next->next!=NULL){
            temp = temp->next;
        }
        temp->next = NULL;
    
    3. Delete from middle
        - Traverse to element before the element to be deleted.
        - Change next pointers to exlude the node from the chain.
        for(int i=2; i< position; i++) {
            if(temp->next!=NULL) {
                temp = temp->next;
            }
        }
        temp->next = temp->next->next;
    
    Search an Element on a Linked List:
        - Make head as the current node
        - Run a loop until the current node is NULL because the last element points to NULL.
        - In each iteration, check if the key of the node is equal to item.
          If it the key matches the item, return true otherwise return false.
        // Search a node
        bool searchNode(struct Node** head_ref, int key) {
            struct Node* current = *head_ref;

            while (current != NULL) {
                if (current->data == key) return true;
                current = current->next;
            }
            return false;
        }
    
    Sort Elements of a Linked List:
        - Use a simple sorting algorithm
        - Bubble sort
        - Sort the elements of a linked list in ascending order.
        1. Make the head as the current node and create another node index for later use.
        2. If head is null, return.
        3. Else, run a loop till the last node (i.e NULL)
        4. In each iteration, follow the following step 5-6.
        5. Store the next node of current in index.
        6. Check if the data of the current node is greater than the next node.
           If it is greater, swap current and index.
        // Sort the linked list
        void sortLinkedList(struct Node** head_ref) {
            struct Node *current = *head_ref, *index = NULL;
            int temp;

            if (head_ref == NULL) {
                return;
            } else {
                while (current != NULL) {
                    // index points to the node next to current
                    index = current->next;

                    while (index != NULL) {
                        if (current->data > index->data) {
                        temp = current->data;
                        current->data = index->data;
                        index->data = temp;
                        }
                        index = index->next;
                    }
                    current = current->next;
                }
            }
        }

    Linked List Operations Implementations: Check implemenetation files


Types of Linked List - Singly linked, doubly linked, and circular
    1. Singly Linked List
    2. Doubly Linked List
    3. Circular Linked List

    Singly Linked List:
        head -> data|next -> data|next -> NULL
        struct node {
            int data;
            struct node *next;
        }
    
    Doubly Linked List:
        head|NULL <-> prev|data|next <-> prev|data|next <-> NULL
        struct node {
            int data;
            struct node *next;
            struct node *prev;
        }

    Circular Linked List:
        - A circular linked list is a variation of a linked list in which the last element
          is linked to the first element which forms a circular loop.
        head -> data|next -> data|next -> head
        - A circular linked list can be either singly linked or doubly linked
            - For a singly linked list, next pointer of last item points to the first item
            - In the doubly linked list, prev pointer of the first item points to the last item as well


Hash Table:
    https://www.programiz.com/dsa/hash-table
    - Hash tables are a data structure that stores elements in key-value pairs where:
        Key: unique integer that is used for indexing the values
        Value: data that are associated with keys

    Hashing (Hash Function):
        - In a hash table, a new index is processed using the keys.
        - The element corresponding to that key is stored in the index, this is called hashing.

        - Let k be a key and h(x) be a hash function.
        - Here, h(k) will give us a new index to store the element linked with k.
        - Look at picture

    Hash Collision:
        - When the hash function generates the same index for multiple keys, there will be a conflict.
        - Ambiguity on what will be stored in the index.
        - This is called a hash collision
        - You can resolve hash collisions using:
            - Collision resolution by chaining
            - Open addressing: linear/quadratic probing and double hashing
        
        1. Collision resolution by chaining:
            - If the hash function produces the same index for multiple elements,
              these elements are stored in the same index by using a doubly-linked list.
            - If j is the slot for multiple elements, it contains a pointer to the head of the list of elements.
            - If no element is present, j contains NIL
            Pseoudocode for opeartions:
                chainedHashSearch(T, k)
                    return T[h(k)]
                chainedHashInsert(T, x)
                    T[h(x.key)] = x //insert at the head
                chainedHashDelete(T, x)
                    T[h(x.key)] = NIL
        
        2. Open addressing:
            - Doesn't store multiple elemnts into the same slot.
            - Each slot is either filled witha single key or left NIL.
            
            i. Linear Probing:
                - Collision is resolved by checking the next slot
                  h(k, i) = (h'(k) + i) mod m
                  where 
                    - i = {0, 1, ...}
                    - h'(k) is a new hash function
                - If a collision occurs at h(k, 0) then h(k, 1) is checked.
                - In this way, the value of i is incremented linearly.
                - The problem is when there is a cluster of filled spots surrounding the collsion
                  This would increase the time required to perform operations on the hash table.
            
            ii. Quadratic Probing:
                - Works similarly to linear probing but the space between the slots is increased
                  (greater than one)
                h(k, i) = (h(k) + c1*i + c*i^2) mod m
                where,
                    - c1 and c2 are positive auxiliary constants
                    - i = {0, 1, ...}
            
            iii. Double Hashing:
                - If a collision occurs after applying a hash function,
                  another hash function is calculated for finding the next slot
                h(k, i) = (h1(k) + ih2(k)) mod m
    
    Good Hash Functions:
        - A good hash function may not prevent collisions completely however it can reduce the number of collisions

        1. Division Method:
            - If k is a key and m is the size of the hash table,
              the hash function h() is calculated as:
              h(k) = k mod m
            Example:
                - If the size of a hash table is 10 and k = 112 then
                  h(k) = 112 mod 10 = 2.
                - The value of m must not be the powers of 2.
                - This is because the powers of 2 in binary format are 10, 100, 1000, ...
                - WHen we find k mod m, we will always get the lower order p-bits.
                if m = 22, k = 17, then h(k) = 17 mod 22 = 10001 mod 100 = 01
                if m = 23, k = 17, then h(k) = 17 mod 22 = 10001 mod 100 = 001
                if m = 24, k = 17, then h(k) = 17 mod 22 = 10001 mod 100 = 0001
                if m = 2p, then h(k) = p lower bits of m
        
        2. Multiplication Method
            h(k) = [m(kA mod 1)]
            where,
                - kA mod 1 gives the fractional part kA
                - [ ] gives the floor value (floor operator)
                - A is any constant. The value of A lies between 0 and 1
                  But an optimal choice will be approx. (sqrt(5) - 1) / 2
        
        3. Universal Hashing
            - The hash function is chosen at random independant of keys
    
    Hash Table Implementations: Check implementation files

    Applications of Hash Tables:
        - Contant time lookup and insertion is required
        - Cryptographic applications
        - Indexing data is required


Heap Data Structure:
    - Complete binary tree that satisfied the heap property
    - Heap property is where any given node is:
        - Always greater than its child node/s and the key of the root node is the largest among all other nodes.
          This peropert is called the max heap property
        - Always smaller than the child node/s and the key of the root node is the smallest among all other nodes.
          This property is called the min heap property.
    
    Heap Operations:
        Heapify:
            - Process of creating a heap data structure from a binary tree.
            - Used to create a min-heap or max-heap
            - Data organization into a binary tree format.
            1. Let the input array be
                3 9 2 1 4 5
                0 1 2 3 4 5
            2. Create a complete binary tree from the array
                      3(0)
                  9(1)    2(2)
                1(1) 4(4)    5(5)
            3. Start from the first index of non-leaf node whose index is given by n/2 - 1.
            4. Set current element i as largest.
            5. The index of left child is given by 2i + 1 and the right child is given by 2i + 2.
              If leftCHild is greater than current Element, set leftChildIndex as largest.
              If rightChild is greater than element in largest, set rightChildIndex as largest.
            6. Swap largest with currentElement
            7. Repeat steps 3-7 until the subtrees are also heapified.

            Heapify(array, size, i)
                set i as largest
                leftChild = 2i + 1
                rightChild = 2i + 2
                
                if leftChild > array[largest]
                    set leftChildIndex as largest
                if rightChild > array[largest]
                    set rightChildIndex as largest

                swap array[i] and array[largest]
            
            MaxHeap(array, size)
                loop from the first index of non-leaf node down to zero
                    call heapify

            For min-heap, leftChild and rightChild must be larger than the parent for all nodes.

        Insert Element into Heap:
            If there is no node, 
                create a newNode.
            else (a node is already present)
                insert the newNode at the end (last node from left to right.)
            heapify the array

            1. Insert the new element at the end of the tree.
            2. Heapify the tree.
            For min heap, the above algorithm is modified so taht parentNode is always smaller than newNode
        
        Delete Element from Heap:
            If nodeToBeDeleted is the leafNode
                remove the node
            Else swap nodeToBeDeleted with the lastLeafNode
                remove noteToBeDeleted
            heapify the array

            1. Select the element to be deleted.
            2. Swap it with the last element.
            3. Remove the last element
            4. Heapify the tree.
            For min heap, above algorithm is modified so that both childNodes are greater than currentNode

        Peak (Find max/min):
            - Peek operation returns the maximum element from Max Heap
            or minimum element from Min Heap without deleting the node.

            For both max heap and min heap:
                return rootNode
            
        Extract Max/Min:
            - Extract max returns the node with maximumm value after removing it from a max heap
            - Extract min returns the node with minimum value after removing it from a min heap
        
    Heap Implementations: check implementations file

    Heap Data Structure Applications:
        - Heap is used while implementing a priority queue.
        - Dijkstra's Algorithm
        - Heap Sort


Fibonacci Heap:
    https://www.programiz.com/dsa/fibonacci-heap
    - A Fibonacci heap is a data structure that consists of a collection of trees
      which follow min heap or max heap property.
    - A node can have more than two children or no children at all.
    - It has more efficient heap operations than that supported by the binomial and binary heaps.
    - It's called fibonacci heap because the trees are constructed in a way
      such that a tree of order n has at least Fn+2 nodes in it, where Fn+2 is the (n+2)th Fibonacci number
    
    Properties of a Fibonacci Heap:
        1. It is a set of min-heap-ordered trees (The parent is always smaller than the children)
        2. A pointer is maintained at the minimum element node
        3. It consists of a set of marked nodes (Decrease key operation)
        4. The trees within a Fibonacci heap are unordered but rooted (A special node is singled out)
    
    Memory Representation of the Nodes in a Fibonacci Heap:
        - The roots of all the trees are linked together for faster access.
        - The child nodes of a parent node are connected to each other through a circular doubly linked list.
        Two main advantages of using a circular doubly linked list:
            1. Deleting a node from the tree takes O(1) time.
            2. The concatenation of two such lists takes O(1) time.
        Find Min: the minimum element is always given by the min pointer.
        Union:
            1. Concatenate the roots of both the heaps.
            2. Update min by selectin a minimum key from the new root lists.
        Extract Min:
            - Most important operation on a fibonacci heap.
            - The node with minimum value is removed from the heap and the tree is re-adjusted.
            1. Delete the min node.
            2. Set the min-pointer to the next root in the root list.
            3. Create an array of size equal to the maximum degree of the trees in the heap before deletion.
            4. Do the following until there are no multiple roots with the same degree.
                5. Map the degree of current root(min-pointer) to the degree in the array.
                6. Map the degree of next root to the degree in array.
                7. If there are more than two mappings for the same degree, then apply union operation
                   to those roots such that the min-heap property is maintained (i.e. the minimum is at the root)
    
    Complexities:
        Insertion: O(1)
        Find Min: O(1)
        Union: O(1)
        Extract Min: O(log n)
        Decrease Key: O(1)
        Delete Node: O(log n)
    
    Fibonacci Heap Applications:
        1. To improve the asymptotic running time of Dijkstra's algorithm
    

Decrease Key and Delete Node Operations on a Fibonacci Heap:
    1. Decrease a key: decreases the value of the key to any lower value
    2. Delete a node: deletes the given node

    Decreasing a key:
        Use following functions:
            Decrease-key:
                1. Select the node to be decreased, x, and change its value to the new value k.
                2. If the parent of x, y, is not null and the key of parent is greater than that of
                   the k then call Cut(x) and Cascading-Cut(y) subsequently.
                3. If the key of x is smaller than the key of min, then mark x as min.
            Cut:
                1. Remove x from the current position and add it to the root list.
                2. If x is marked, then mark it as false.
            Cascading-Cut:
                1. If the parent of y is not null then follow the following steps.
                2. If y is unmarked, then mark y.
                3. Else, call Cut(y), and Cascading-Cut(parent of y).
        
    Deleting a Node:
        - This process makes of of decrease-key and extract-min operations.
        1. Let k be the node to be deleted.
        2. Apply decrease-key operation to decrease the value of k to the lowest possible value (i.e -infinite)
        3. Apply extract-min operation to remove this node.
