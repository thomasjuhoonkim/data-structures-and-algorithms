Tree Data Structure:
    https://www.programiz.com/dsa/trees
    - A tree is a nonolinear hierarchical data structure that consists of nodes connected by edges.

    Why Tree Data Structures?:
        - Other data structures such as arrays, linked lists, stacks, and queues are linear
          data structures that store data sequentially.
        - In order to perform any operation in a linear data structure, the time complexity
          increases with the increase in data size.
        - But, it is not acceptable in today's computational world.
        - Different tree data structures allow quicker and easier access to the data
          as it is a non-linear data structure.
    
    Tree Terminologies:
        Node:
            - A node is an entity that contains a key or value and pointers to its child nodes.
            - The last nodes of each path are called leaf nodes or external nodes that do not
              contain a link/pointer to child nodes.
            - The node having at least a child node is called an internal node.
        Edge:
            - A link between any two nodes.
        Root:
            - It is the topmost node of a tree.
        Height of a Node:
            - The height of a node is the number of edges from the node to the deepest leaf
              (the longest path from the node to a leaf node).   
        Depth of a Node:
            - The depth of a node is the number of edges from the root to the node.
        Height of a Tree:
            - The height of a Tree is the ehight of the root node or the depth of the deepest node
        Degree of a Node:
            - The degree of a node is the total number of branches of that node.
        Forest:
            - A collection of disjoint trees is called a forest.
            - You can create a forest by cutting the root of a tree.
    
    Types of Tree:
        1. Binary Tree
        2. Binary Search Tree
        3. AVL Tree
        4. B-Tree
    
    Tree Traversal:
        - In order to perform any operation on a tree, a specific node must be reached.
        - The tree traversal algorithm helps in visiting a required node in the tree.
    
    Tree Applications:
        - Binary Search Trees(BSTs) are used to quickly check whether an element is
          present in a set or not.
        - Heap is a kind of tree that is used for heap sort.
        - A modified version of a tree called Tries is used in modern routers to
          store routing information.
        - Most popular databases use B-Trees and T-Trees, which are variants of the
          the tree structure we learned above to store their data.
        - Compilers use a syntax tree to validate the syntax of every program you write.

==========================================================================================

Tree Traversal - inorder, preorder, and postorder:
    https://www.programiz.com/dsa/tree-traversal
    - Traversing a tree means visiting every node in the tree.
    - You might for instance, want to add all the avlues in the tree or find the largest one.
    - For all these operations, you will need to visit each node of the tree.
    - Linear data structures liek arrays, stacks, queues, and linked lists ave only one way
      to read the data.
    - But heirarchical data structure like a tree can be traversed in different ways.
    Example:
        - Starting from top, left to right: 1 -> 12 -> 5 -> 6 -> 9
        - Starting from bottom, left to right: 5 -> 6 -> 12 -> 9 -> 1
        - Although this process is somewhat easy, it doesn't respect the heirarchy of the tree,
          only the depth of the nodes.
    - Instead traversal methods that take into account the basic structure of a tree are used.
        struct node {
            int data;
            struct node* left;
            struct node* right;
        }
    - The struct node pointed to by left and right might have other left and right children
      so we should think of them as sub-trees instead of sub-nodes.
    According to this structure, every tree is a combination of
        - A node carrying data
        - Two subtrees
    - Our goal is to visit each node, we need to visit all the nodes in the subtree,
      visit the root node and visit all the nodes in the right subtree as well.
    - Depending on the order in which this is done, there can be three types of traversal.

    Inorder traversal:
        1. First, visit all the nodes in the left subtree
        2. Then the root node
        3. Visit all the nodes in the right subtree.
        inorder(root->left)
        display(root->data)
        inorder(root->right)
    
    Preorder traversal:
        1. Visit root node
        2. Visit all the nodes in the left subtree
        3. Visit all the nodes in the right subtree
        display(root->data)
        preorder(root->left)
        preorder(root->right)

    Postorder traversal:
        1. Visit all the nodes in the left subtree
        2. Visit all the nodes in the right subtree
        3. Visit the root node
        postorder(root->left)
        postorder(root->right)
        display(root->data)
    
====================================================================================

Binary Tree:
	https://www.programiz.com/dsa/binary-tree
    - A binary tree data structure is a tree data structure in which each parent can
        have at most two children.
    - Each binary tree consists of three items:
        - A data item
        - Address of left child
        - Address of right child
	
	Types of Binary Tree:
		1. Full Binary Tree
			- A special type of binary tree in which every
		   	  parent node/internal node has either two or no children.
		
		2. Perfect Binary Tree
			- Every internal node has exactly two child nodes and all the leaf
			  nodes are at the same level.
		
		3. Complete Binary Tree
			- Similar to a full binary tree but with two major differences
			1. Every level must be completely filled
			2. All the leaf elements must lean towards the left
			3. The last leaf element might not have a right sibling
			   i.e. a complete binary tree doesn't have to be a full binary tree
		
		4. Degenerate or Pathological Tree
			- Is the tree having a single child either left or right.
		
		5. Skewed Binary Tree
			- A pathological/degenerate tree in which the tree is either dominated by the
			  left nodes or the right nodes. Thus, there are two types of skewed binary tree:
			  Left-Skewed Binary Tree and Right-Skwered Binary Tree
		
		6. Balanced Binary Tree
			- Difference between the height of the left and the right subtree for each node
			  is either 0 or 1.
	
	Binary Tree Representation:
		- A node of a binary tree is represented by a structure containing a data part
		  and two pointers to other structures of the same type.
			struct node
			{
				int data;
				struct node *left;
				struct node *right;
			};
	
	Binary Tree Example: Find in examples

	Binary Tree Applications:
		- For easy and quick access to data
		- In router algorithms
		- To implement heap data structure
		- Syntax Tree

====================================================================================

Full Binary Tree:
	https://www.programiz.com/dsa/full-binary-tree
	- A special type of binary tree in which every parent node/internal node
	  has either two or no children.
	- Also known as a proper binary tree.

	Full Binary Tree Theorems:
		Let, i = the number of internal nodes
		 	 n = be the total number of nodes
		 	 l = number of leaves
		 	 λ = number of levels
		1. The number of leaves is i + 1
		2. The total number of nodes is 2i + 1
		3. The number of internal nodes is (n - 1) / 2
		4. The number of leaves is (n + 1) / 2
		5. The total number of nodes is 2l - 1
		6. The number of internal nodes is l - 1
		7. The number of leaves is at most 2^(λ - 1)

======================================================================================

Perfect Binary Tree:
	https://www.programiz.com/dsa/perfect-binary-tree
	- A type of binary tree in which every internal node has exactly two child nodes
	  and all the leaf nodes are at the same level.
	- All internal nodes have a degree of 2
	- Recursively, a perfect binary tree can be defined as:
		1. If a single node has no children, it is a perfect binary tree of height h = 0.
		2. If a node has h > 0, it is a perfect binary tree if both of its subtrees are of
		  height h - 1 and are non-overlapping.
	
	Perfect Binary Tree Theorems:
		1. A perfect binary tree of height h has 2^(h + 1) - 1 nodes
		2. A perfect binary tree with n nodes has height log(n + 1) - 1 = Theta(ln(n))
		3. A perfect binary tree of height h has 2^h leaf nodes
		4. The average depth of a node in a perfect binary tree is theta(ln(n))

==========================================================================================

Complete Binary Tree:
	https://www.programiz.com/dsa/complete-binary-tree
	- A binary tree in which all the levels are completely filled except possibly the lowest one
	  , which is filled from the left.
	- Like a full binary tree, but with two major differences:
		1. All the leaf elements must lean towards the left.
		2. The last leaf element might not have a right sibling
		   i.e. a complete binary tree doesn't have to be a full binary tree.
	
	Full Binary Tree vs Complete Binary Tree:

	How a Complete Binary Tree is Created?
		1. Select the first element of the list to be the root node. (no. of elements on level-I: 1)
		2. Put the second element as a left child of the root node and
		   the third element as the right child. (no. of elements on level-II: 2)
		3. Put the next two elements as children of the left node of the second level.
		   Again, put the next two elements as children of the right node of the second level
		   (no. of elements on level-III: 4).
		4. Keep repeating until you reach the last element.
	
	Check Complete Tree: check example files.

	Relationship between array indexes and tree element:
		- Has interesting property to find children and parents of any node.
		- If index of any element is i, the element in the index 2i + 1
		  will become the left child and element in 2i + 2 index will become the right child.
		  	Left child of 1 (index 0)
			= element in (2*0+1) index 
			= element in 1 index 
			= 12


			Right child of 1
			= element in (2*0+2) index
			= element in 2 index 
			= 9

			Similarly,
			Left child of 12 (index 1)
			= element in (2*1+1) index
			= element in 3 index
			= 5

			Right child of 12
			= element in (2*1+2) index
			= element in 4 index
			= 6

		- Also, the parent of any element at index i is given by the lower bound of (i-1)/2.
			Parent of 9 (position 2) 
			= (2-1)/2 
			= ½ 
			= 0.5
			~ 0 index 
			= 1

			Parent of 12 (position 1) 
			= (1-1)/2 
			= 0 index 
			= 1
		- Understand the mapping of array indexes to tree positions is critical to understanding
		  how the Heap Data Structure works and how it is used to implement Heap Sort.
		
		Complete Binary Tree Applications:
			- Heap-based data structures
			- Heap sort

===========================================================================================

Balanced Binary Tree:
	- A balanced binary tree, also referred to as a height-balanced binary tree,
	  is defined as a binary tree in which the height of the left and right subtree of any node
	  differ by not more than 1.
		1. Difference between the left and the right subtree of any node is not more than one
		2. the left subtree is balanced.
		3. the right subtree is balanced.
	- Difference (df) = |height of left child - height of right child|

	Check if Tree is height Balanced: check examples

	Balanced Binary Tree Applications:
		- AVL Tree
		- Balanced Binary Search Tree

============================================================================================

Binary Search Tree (BST):
	- A binary search tree is a data structure that quickly allows us to maintain a
	  sorted list of numbers.
		- It is called a binary tree because each tree node has a maximum of two children.
		- It is called a search tree because it can be used to search for the presence of
		  a number in O(log(n)) time.
	Properties that separate a binary search tree from a regular binary tree is:
		1. All nodes of left subtree are less than the root node.
		2. All nodes of right subtree are more than the root node.
		3. Both subtrees of each node are also BSTs i.e. they have the above two properties.
	(A tree having a right subtree with one value samller than the root is shown to
	 demonstrate that it is not a valid binary search tree)
	
	Two basic Operations that can be Performed on a Binary Search Tree:
		Search Operation:
			- The algorithm depends on the property of BST that if each left subtree has values
			  below root and each right subtree has values above the root.
			- If the value is below the root, we can say for sure that the vlaue is not in the
			  right subtree; we need to only search in the left subtree and if the value is above
			  the root, we can say for sure that the value is not in the left subtree; we need
			  to only search in the right subtree.
			Algorithm:
				search(*root)
					If root == NULL 
						return NULL;
					If number == root->data 
						return root->data;
					If number < root->data 
						return search(root->left)
					If number > root->data 
						return search(root->right)
			- If the value is not found, we eventually reach the left or right child of a leaf node
			  which is NULL and it gets propagated and returned.
		
		Insert Operation:
			- Inserting a value in the correct position is similar to searching because we try to
			  maintain the rule that the left subtree is lesser than root and the right subtree is
			  larger than root.
			- We keep going to either right or left subtree depending on the value and when we reach
			  a point left or right subtree is null, we put the new node there.
			Algorithm:
				insert(*node, data)
					If node == NULL 
						return createNode(data)
					if (data < node->data)
						node->left  = insert(node->left, data);
					else if (data > node->data)
						node->right = insert(node->right, data);  
					return node;
				- The algorithm isn't as simple as it looks.
				- We have attached the node but still have to exit from the function without doing
				  any damage to the rest of the tree. This is where the return node; at the end
				  comes in handy. In the case of NULL, the newly created node is returned and
				  attached to the parent node, otherwise the same node is returned without any
				  change as we go up until we return the to the root.
				- This makes sure that as we move back up the tree, the other node connections
				  aren't changed.
		
		Deletion Operation:
			- There are three cases for deleting a node from a binary search tree.
			Case 1:
				- In the first case, the node to be deleted is the leaf node.
				  In such a case, simply delete the node from the tree.
			Case 2:
				- The node to be deleted has a single child node.
				  In such a case, follow steps:
					1. Replace that node with its child node.
					2. Remove the child node from its original position.
			Case 3:
				- The node to be delted has two children.
				  In such a case follow the steps:
				  	1. Get the inorder successor of that node.
					2. Replace the node with the inorder successor.
					3. Remove the inorder successor from its original position.
	
	Binary Search Tree Implementation: check example files

	Binary Search Tree Complexities:
		Time Complexity:
			Search:
				Best: O(logn)
				Average: O(logn)
				Worst: O(n)
			Insertion:
				Best: O(logn)
				Average: O(logn)
				Worst: O(n)
			Deletion:
				Best: O(logn)
				Average: O(logn)
				Worst: O(n)
		Space Complexity:
			Space complexity for all operations is O(n)
		
	Binary Search Tree Applications:
		1. In multilevel indexing in the database
		2. For dynamic sorting
		3. For managing virtual memory areas in Unix Kernel

=============================================================================================

AVL Tree:
	- AVL tree is a self-balancing binary search tree in which each node maintains extra information called a balance factor whose value is either -1, 0, +1
	- Got its name after inventor Georgy Adelson-Velsky and Landis.

	Balance Factor:
		- Balance factor of a node in an AVL tree is the difference between the height of the left subtree
		  and that of the right subtree of that node.
		- Balance Factor = (Height of Left Subtree - Height of Right Subtree) or (Height of Right Subtree - Height of Left Subtree)
		- The self balancing property of an avl tree is maintained by the balance factor.
		- The value of balance factor should always be -1, 0, +1.
	
	Operations on an AVL tree:
		- Rotating the subtrees in an AVL Tree
			- In rotation operation, the positions of the nodes of a subtree are interchanged.
			Left Rotate:
				- In left-rotation, the arrangement of the nodes on the right is transformed into the
				  arrangements on the left node.
				1. Let the inital tree be:
					p
					x
				   a  y
				     B  Y
				2. If y has a left subtree, assign x as the parent of the left subtree of y.
				3. If the parent of x is NULL, make y as the root of the tree.
				4. Else if x is the left child of p, make y as the left child of p.
				5. Else assign y as the right child of p.
				6. Make y as the parent of x.
			Right Rotate:
				- In left-rotation, the arragement of the nodes on the left is transformed into the
				  arrangements on the right node.
				1. Let the inital tree be:
						p
						y
					  x	  a
					y	B
				2. If x has a right subtree, assign y as the parent of the right subtree of x.
				3. If the parent of y is NULL, make x as the root of the tree.
				4. Else if y is the right child of its parent p, make x as the right child of p.
				5. Else assign x as the left child of p.
				6. Make x as the parent of y.
			Left-Right and Right-Left Rotate:
				- In left-right rotation, the arragements are first shifted to the left and then the right
				Bottom: x-y-z Top
				1. Do left rotation on x-y
				2. Do the right rotation on y-z.
				- In the right-left rotation, the arrangements are first shifted to the right and then to the left.
				Bottom: y-x-z Top
				1. Do right rotation on x-y
				2. Do left rotation on z-y
			
	Algorithm to insert a newNode:
		- A newNode is always inserted as a leaf node with balance factor equal to 0.
		1. Initial Tree and node to be inserted.
		2. Go to the appropriate leaf node to insert a newNode using the following recursive steps.
		   Compare newKey with rootKey of the current tree.
		   	a. if newKey < rootKey, call insertion algorithm on the left subtree of the current node until
			   the leaf node is reached.
			b. Else if newKey > rootKey, call insertion algorithm on the right subtree of current node until
			   the leaf node is reached.
			c. Else, return leafNode.
		3. Compare leafKey obtained from the above steps with newKey:
			a. If newKey < leafKey, make newNode as the leftChild of leafNode.
			b. Else, make newNode as rightChild of leafNode.
		4. Update balanceFactor of the nodes.
		5. If the nodes are unbalanced, then rebalance the node.
			a. If balanceFactor > 1, it means the height of the left subtree is greater than that of the
			   right subtree. So, do a right rotation or left-right rotation.
				a. If newNodeKey < leftChildKey do right rotation.
				b. Else, do left-right rotation.
			b. If balanceFactor < -1, it means the height of the right subtree is greater than that of the 
			   left subtree. So, do a right rotation or right-left rotation.
				a. If newNodeKey > rightChildKey do left rotation.
				b. Else, do right-left rotation.
		6. The final tree.

	Algorithm to Delete a node:
		- A node is always deleted as a leaf node. After deleting a node, the balance factors of the nodes get changed.
		  In order to rebalance the balance factor, suitable rotations are performed.
		1. Locate nodeToBeDeleted (recursion is used to find nodeToBeDeleted in the code used below.)
		2. There are three cases for deleting a node:
			a. If nodeToBeDeleted is the leaf node (ie. does not have any child), then remove nodeToBeDeleted.
			b. If nodeToBeDeleted has one child, then substitute the contents of nodeToBeDeleted with that of the chid.
			   Remove the child.
			c. If nodeToBeDelted has two children, find the inorder successor w of nodeToBeDelted (ie. node with a minimum
			   value of key in the right subtree.)
			d. Subsistute the contents of nodeToBeDeleted with that of w.
			e. Remove the leaf node w.
		3. Update balanceFactor of the nodes.
		4. Rebalance the tree if the balance factor of any of the nodes is not equal to -1, 0, 1.
			a. If balanceFactor of currentNode > 1,
				a. If balanceFactor of leftChild >= 0, do right rotation.
				b. Else do left-right rotation.
			b. If balanceFactor of currentNode < -1,
				a. If balanceFactor of rightChild <= 0, do left rotation.
				b. Else do right-left rotation.
		5. The final tree.
	
	AVL Tree Implementation: check example files.
	
	Complexities of Different Operations on an AVL Tree:
		Insertion: O(log n)
		Deletion: O(log n)
		Search: O(log n)
	
	AVL Tree Applications:
		- For indexing large records in databases.
		- For searching in large databases.
		