B-tree:
    https://www.programiz.com/dsa/b-tree
    - B-tree is a special type of self-balancing search tree in which each node can contain
      more than one key and can have more than two children.
    - It is a generalized form of the binary search tree.
    - Also known as a height-balanced m-way tree.
    Why do you need a B-tree data structure?:
        - The need for B-tree arose with the rise in the need for lesser time in accessing
          the physical storage media like a hard disk.
        - The secondary storage devices are slower with a larger capacity.
        - There was a need for such types of data structrues that minimize the disk accesses.
        - Other data structures succh as a binary search tree, avl tree, red-black tree, etc can
          store only one key in one node.
        - If you have to store a large number of keys, then the height of such trees becomes very
          large and the access time increases.
        - However, as B-tree can store many keys in a single node and can have multiple child nodes.
        - This dereases the height significantly allowing faster disk accesses.
    
    B-tree Properties:
        1. For each node x, the keys are stores in increasing order.
        2. In each node, there is a boolean value x.leaf which is true if x is a leaf.
        3. If n is the order of the tree, each internal node can contain at most n - 1 keys
           along with a pointer to each child.
        4. Each node except root can have at most n children and at least n/2 children.
        5. All leaves have the same depth (height-h of the tree).
        6. The root has at least 2 children and contains a minimum of 1 key.
        7. If n >= 1, then for any n-key B-tree of height h and minimum degree t >= 2,
           h >= logt (n+1)/2.
    
    Opeartions on a B-tree:
        Searching an element in a B-tree:
            - Searching for an element in a B-tree is the generalized form of searching an element
              in a Binary Search Tree.
            1. Starting from the root node, compare k with the first key of the node.
               If k = the first ke of the node, return the node and the index.
            2. If k.leaf = true, return NULL (i.e. not found).
            3. If k < the first key of the root node, search the left child of this key recursively.
            4. If there is more than one key in the current node and k > the first key,
               compare k with the next key in the node.
               If k < next key, search the left child of this key (ie. k lies in between the first
               and second keys).
               Else, search the right child of the key.
            5. Repeat steps 1 to 4 until the leaf is reached.
    
    Algorithm for Searching an Element:
        BtreeSearch(x, k)
            i = 1
            while i ≤ n[x] and k ≥ keyi[x]        // n[x] means number of keys in x node
                do i = i + 1
            if i  n[x] and k = keyi[x]
                then return (x, i)
            if leaf [x]
                then return NIL
            else
                return BtreeSearch(ci[x], k)
    
    B-tree opeations code: example files

    Searching Complexity on B Tree:
        Worst case Time Complexity: Theta(log n)
        Average case Time complexity: Theta(log n)
        Best case Time Complexity: Theta(log n)
        Average case Space complexity: Theta(n)
        Worst case Space complexity: Theta(n)
    
    B Tree Applications:
        - Databases and file systems
        - To store blocks of data (secondary storage media)
        - Multilevel indexing

========================================================================================

Insertion into a B-tree:
	- Inserting an element on a B-tree consists of two events:
		- Searching the appropriate node to insert the element and
		  splitting hte node if required.
	- Insertion operation always takes place in the bottom-up approach.
	Insertion Operation:
		1. If the tree is empty, allocate a root node and insert the key.
		2. Update the allowed number of keys in the node.
		3. Search the appropriate node for insertion.
		4. If the node is full, follow the steps below.
		5. Insert the elemtns in increasing order.
		6. Now, there are elements greater than its limit. So, split at the median
		7. Push the median key upwards and make the left keys as a left child
		   and the right keys as a right child.
		8. If the node is not full, follow the steps below.
		9. Insert the node in increasing order.
	
	Insertion Example: check website

	Algorithm for Inserting an Element:
		BreeInsertion(T, k)
		r  root[T]
		if n[r] = 2t - 1
			s = AllocateNode()
			root[T] = s
			leaf[s] = FALSE
			n[s] <- 0
			c1[s] <- r
			BtreeSplitChild(s, 1, r)
			BtreeInsertNonFull(s, k)
		else BtreeInsertNonFull(r, k)
		BtreeInsertNonFull(x, k)
		i = n[x]
		if leaf[x]
			while i ≥ 1 and k < keyi[x]
				keyi+1 [x] = keyi[x]
				i = i - 1
			keyi+1[x] = k
			n[x] = n[x] + 1
		else while i ≥ 1 and k < keyi[x]
				i = i - 1
			i = i + 1
			if n[ci[x]] == 2t - 1
				BtreeSplitChild(x, i, ci[x])
				if k &rt; keyi[x]
					i = i + 1
			BtreeInsertNonFull(ci[x], k)
		BtreeSplitChild(x, i)
		BtreeSplitChild(x, i, y)
		z = AllocateNode()
		leaf[z] = leaf[y]
		n[z] = t - 1
		for j = 1 to t - 1
			keyj[z] = keyj+t[y]
		if not leaf [y]
			for j = 1 to t
				cj[z] = cj + t[y]
		n[y] = t - 1
		for j = n[x] + 1 to i + 1
			cj+1[x] = cj[x]
		ci+1[x] = z
		for j = n[x] to i
			keyj+1[x] = keyj[x]
		keyi[x] = keyt[y]
		n[x] = n[x] + 1
	
	B-tree implementation example: check example files

=====================================================================================

Deletion from a B-tree:
	- Deleting an element on a B-tree consists of three main events:
		- Searching the node where the key to be deleted exists
		- Deleting the key and balancing the tree if required.
	- While deleting a tree, a condition called underflow may occur.
	- Underflow occurs when a node contains less than the
	  minimum number of keys it should hold.
	Terms to be understood:
		1. Inorder Predecessor
			- The largest key on the left child of a node is called
			  its inorder predecessor.
		2. Inorder Successor
			- The smallest key on the right hcild of a node is called
			  its inorder successor.
	Deletion Operation:
		- One must know these facts about a B tree of degree m.
		1. A node can have a maximum of m children (i.e. 3)
		2. A node can contain a maximum of m - 1 keys. (i.e. 2)
		3. A node should have a minimum of [m/2] children (i.e. 2)
		4. A node (except root node) should contain a minimum of [m/2] - 1 keys. (i.e. 1)
		Three main cases for deltion opeartino in a B tree:
			Case 1:
				- The key to be deleted lies in the leaf.
				1. The deletion of the key does not violate the property of the
				   minimum number of keys a node should hold.
				2. THe deletion of the key violates the property of the
				   minimum number of keys a node should hold. In this case, we borrow a key
				   from its immediate neighboring subling node in the order of left to right.

				   First, visit the immediate left sibling. If the left sibling node has
				   more than a minimum number if keys, then borrow a key from this node.

				   Else, check to borrow from the immediate right sibling node.

				   If both the immediate subling nodes already have a minimum
				   number of keys, then merge the node with either the left sibling node
				   or the right sibling node.
				   This merging is done through the parent node.
			
			Case 2:
				- If the key to be deleted lies in the internal node,
				  the following cases occur
				1. The internal node, which is deleted, is replaced by an inorder predecessor
				   if the left child has more than the minimum number of keys
				2. The internal node, which is deleted, is replaced by an inorder successor
				   if the right child has more than the minimum number of keys.
				3. If either child has exactly a minimum number of keys then,
				   merge the left and the right children.
				   After merging if the parent node has less than the minimum
				   number of keys then, look for the siblings as in Case 1.
			
			Case 3:
				- In this case, the height of the tree shrinks.
				- If the target key lies in an internal node, and the deletion of the key
				  leads to fewer number of keys in the node (i.e. less than the minimum required)
				  then look for the inorder predecessor and the inroder successor.
				- If both children contain a minimum number of keys then, borrowing cannot take place.
				- This leads to Case 2(3) i.e.e merging the children.
				- Look for the sibling to borrow a key.
				- But, if the subling also has only a minimum number of keys then,
				  merge the node with the sibling along with parent.
				- Arrange the children accordingly (increasing order).

	Deletion in a B-tree implementation example: example files

	Deletion Complexity:
		Best case Time complexity: Theta(log n)
		Average case Space complexity: Theta(n)
		Worst case Space complexity: Theta(n)

==============================================================================

B+ Tree:
	https://www.programiz.com/dsa/b-plus-tree
	- A B+ tree is ana advanced form of a self-balancing tree in which all the values
	  are present in the leaf level.
	- Must know multilevel indexing.
	- In multilevel indexing, the index of indeces is created as a figure.
	  It makes accessing the data easier and faster.
	Properties of a B+ Tree:
		1. All leaves are at the same level.
		2. The root has at least two children.
		3. Each node except root can have a maximum of m children and at least m/2 children.
		4. Each node can contain a maximum of m-1 keys and a minimum of [m/2] - 1 keys.
	
	Comparison between a B-tree and a B+ tree:
		- The data pointers are present only at the leaf nodes on a B+ tree
		  whereas the data pointers are present in the internal, leaf or root nodes on a B-tree.
		- The leaves are not connected with each other on a B-tree
		  whereas they are connected on a B+ tree.
		- Operations on a B+ tree are faster than on a B-tree.
	
	Searching on a B+ Tree:
		- The following steps are followed to search for data in a B+ Tree of order m.
		  Let the data to be searched be k.
		1. Start from the root node. Compare k with the keys at the root node [k1, k2, k3, k(m-1)]
		2. If k < k1, go to the left child of the root node.
		3. Else if k == k1, compare k2. If k < k2, k lies between k1 and k2.
		   So, search in the left child of k2.
		4. If k > k2, go for k3, k4,..., k(m-1)
		5. Repeat the above steps until a leaf node is reached.
		6. If k exists in the leaf node, return true else return false.
	
	Searching example on a B-tree: Website

	B+ tree implementation example: example files

	Search Complexity:
		Time Complexity:
			- If linear search is implemented inside a node, then total complexity is Theta(logt n).
			- If binary search is used, then total copmlexity is Theta(log2 t.logt n)
	
	B+ Tree Applications:
		- Multilevel Indexing
		- Faster operations on the tree (insertion, deletion, search)
		- Database indexing

============================================================================================================

Insertion on a B+ Tree:
	- Inserting an element into a B+ tree consists of three main events:
		1. Seraching the appropriate leaf
		2. Inserting the element
		3. Balancing/splitting the tree.
	
	Insertion Operation:
		- The root has at least two children.
		- Each node except root can have a maximum of m children and at least m/2 children.
		- Each node can contain a maximum of m - 1 keys and a minimum of [m/2] - 1 keys.
		The following steps are followed for inserting an elemtn.
			1. Since every element is inserted into the leaf node,
			   go to the appropriate leaf node.
			2. Insert the key into the leaf node.
		Case 1:
			1. If the leaf is not full, insert the key into the leaf node in increasing order.
		Case 2:
			1. If the leaf is full, insert the key into the leaf node in increasing order
			   and balance the tree in the following way.
			2. Break the node at m/2th position.
			3. Add m/2th key to the parent node as well.
			4. If the parent node is already full, follow steps 2 to 3.
	
	Insertion example: website

	Insertion implementation example: example files

	Insertion Complexity:
		Time complexity: Theta(t.logt n)
		The complexity is dominated by Theta(logt n)

=====================================================================================================

Deletion from a B+ Tree:
	- Deleting an element on a B+ tree consists of three main events:
		1. Searching the node where the key to be deleted exists,
		2. Deleting the key and balancing the tree if required.
		3. Unferflow is a situation when there is less number of keys in a node than the
		   minimum number of keys it should hold.
	
	Deletion Operation:
		- One must know these facts about a B+ tree of degree m.
		1. A node can have a maximum of m children. (ie. 3)
		2. A node can contain a maximum of m - 1 keys (ie. 2)
		3. A node should have a minimum of [m/2] children.
		4. A node (except root node) should contain a minimum of [m/2] -1 keys.
		- While deleting a key, we have to take care of the keys present in the internal nodes (ie. indexes)
		  as well because the valyes are redundant in a B+ tree.
		- Search the key to be deleted then follow the following steps.
		Case 1:
			- The key to be deleted is present only at the leaf node not in the indexes (or internal nodes)
				1. There is more than the minimum number of keys in the node.
				   Simply delete the key.
				2. There is an exact minimum number of keys in the node.
				   Delete the key and borrow a key from the immediate sibling.
				   Add the median key of the sibling node to the parent.
		Case 2:
			- The key to be deleted is present in the internal nodes as well.
			  Then we have to remove them from the internal nodes as well.
			- There are the following cases for this situation.
				1. If there is more than the minimum number of keys in the node,
				   simply delete the key from the leaf node and delete the key from the internal node as well.
				   Fill the empty space in the internal node with the inorder successor.
				2. If there is an exact minimum number of keys in the node,
				   then delete the key and borrow a key from its immediate subling (through the parent).
				   Fill the empty space created in the index (internal node) with the borrowed key.
				3. This case is similar to Case 2(1) but here, empty space is generated above the immediate parent node.
				   After deleting the key, merge the empty space with its sibling.
				   Fill the empty space in the grandparent node with the inorder successor.
		Case 3:
			- In this case, the height of the tree gets shrinked.
			- It is a little complicated. Deleting 55 from the tree below leads to this condition.
			- It can be understood in the illustrations below.
	
	Deletion implementation example: example files

=====================================================================================================================================

Red-Black Tree:
	- Self-balancing binary search tree in which each node contains an extra bit
	  for denoting the color of the node, either red or black.
	Properties:
		1. Red/Black Property: every node is colored, either red or black
		2. Root Property: the root is black
		3. Leaf property: every leaf is (NIL) is black.
		4. Red Property: if a red node has children, then the children are always black
		5. Depth Property: for each node, any simple path from this node to any of its descendant leaf has
		   the same black-depth (the number of black nodes)
	
	Each node has the follwing attributes:
		- color
		- key
		- leftChild
		- rightChild
		- parent (except root node)
	
	How does the red-black tree maintian the property of self-balancing?:
		- The red-black color is meant for balancing the tree.
		- The limitations put on the node colors ensure that any simple path from the root to a leaf
		  is not more than twice as long as any other such path.
		- It helps in maintaining the self-balancing property if the red-black tree.
	
	Operations on a Red-Black Tree:
		Rotating the subtrees in a Red-Black Tree:
			- The positions of the nodes of a subtree are interchanged.
			- Used for maintaing the properties of a red-black tree when they are violated by other operations
			  such as insertion and deletion.
			Left Rotate:
				- The arrangement of the nodes on the right is transformed into the arrangements on the left node.
				- Check website
			Right Rotate:
				- The arrangement of the nodes on the left is transformed into the arrangements on the right node.
				- Check website
			Left-Right and Right-Left Rotate:
				- In a left-right rotation, the arrangements are first shifted to the left and then to the right.
				- Check website
				- In a right-left rotation, the arrangements are first shifted to the right and then to the left.
				- Check website
			
		Inserting an element into a Red-Black Tree:
			- While inserting a new node, the new node is always inserted as a RED node.
			- AFter insertion of a new node, if the tree is violating the peroperties of a red-black tree,
			  perform the following operations:
				1. Recolor
				2. Rotation
			
			Algorithm to insert a node:
				1. Let y be the leaf (ie. NIL) and x be the root of the tree.
				2. Check if the tree is empty (ie. whether x is NIL). If yes, insert newNode as a root node
				   and color it black.
				3. Else, repeat steps following steps until leaf(NIL) is reached.
					a. Compare newKey with rootKey.
					b. If newKey is greater than rootKey, traverse through the right subtree.
					c. Else traverse through the left subtree.
				4. Assign the parent of the leaf as a parent of newNode.
				5. If leafKey is greater than newKey, make newNode as rightChild.
				6. Else, make newNode as leftChild.
				7. Assign NULL to the left and rightChild of newNode.
				8. Assign RED color to newNode.
				9. Call InsertFix-algorithm to maintain the property of red-black tree if violated.
			
			Why are newly inserted nodes always red in a red-black tree?:
				- Inserting a red node does not violate the depth property of a red-black tree.
				- If you attach a red node to a red node, then the rule is violated but it is easier to fix this problem
				  than the propblem introduced by violating the depth property.
			
			Algorithm to maintain red-black property after insertion:
				- This algorithm is used for maintaing the property of a red-black tree is the insertion of a newNode
				  violates this property.
				1. Do the following while the parent of newNode p is RED.
				2. If p is the left child of grandParent gP of z, do the following:
					Case-I:
						a. If the color of the right child of gP of z is RED, set the color of both the children of gP
						   as BLACK and the color of gP as RED.
						b. Assign gP to newNode.
					Case-II:
						c. Else if newNode is the right child of p then, assign p to newNode.
						d. Left-Rotate newNode.
					Case-III:
						e. Set color of p as BLACK and color of gP as RED.
						f. Right-Rotate.
				3. Else, do the following:
					a. If the color of the elft child of gP of z is RED, set the color of both
					   the children of gP as BLACK and the color of gP as RED.
					b. Assign gP to newNode
					c. Else if newNode is the left child of p then, assign p to newNode and Right-Rotate newNode.
					d. Set color of p as BLACK and color of gP as RED.
					e. Left-Rotate gP
				4. Set the root of the tree as BLACK
		
		Deleting an element from a Red-Black Tree:
			- This opeartion removes a node from the tree, After deleting a node,
			  the red-black property is maintained again.
			
			Algorithm to delete a node:
				1. Save the color of nodeToBeDeleted in originalColor
				2. If the left child of nodeToBeDeleted is NULL
					a. Assign the right childof nodeToBeDeleted to x.
					b. Transplant nodeToBeDeleted with x.
				3. Else if the right child of nodeToBeDeleted is NULL
					a. Assign the left child of nodeToBeDeleted into x.
					b. Transplant nodeToBeDeleted with x.
				4. Else
					a. Assign the minimum of right subtree of nodeToBeDeleted into y.
					b. Save the color of y in originalColor
					c. Assign the rightChild of y into x
					d. If y is a child of nodeToBeDeleted, then set the parent of x as y.
					e. Else, transplant y with rightChild of y.
					f. Transplant nodeToBeDeleted with y
					g. Set the color of y with originalColor
				5. If the originalColor is BLACK, call DeleteFix(x)
			
			Algorithm to maintain Red-Black property after deletion:
				- This algorithm is implemented when a black node is deleted because it violates
				  the black depth property of the red-black tree.
				- This violation is corrected by assuming that node x (which is occupuing y's original position)
				  has an extra black.
				- It is either double black or black and red. This violates the red-black properties.
				- However, the color attribute of x is not changed rather the extra black is represented in x's
				  pointing to the node.
				The extra black can be removed if:
					1. It reaches the root node.
					2. If x points to a red-black node. In this case, x is colored black.
					3. Suitable rotations and recoloring are performed.
				
				The following algorithm retains the properties of a red-black tree.
					1. Do the following until the x is not the root of the tree and the color of x is BLACK
					2. If x is the left child of its parent then,
						a. Assign w to the sibling of x
						b. If the right child of parent of x is RED,
							Case-I:
								a. Set the color of the right child of the parent of x as BLACK.
								b. Set the color of the parent of x as RED
								c. Left-Rotate the parent of x
								d. Assign the rightChild of the parent of x to w
						c. Else if the color of the rightChild of w is BLACK
							Case-II:
								a. Set the color of w as RED
								b. Assign the parent of x to x
						d. Else if the color of the rightChild of w is BLACk
							Case-III:
								a. Set the color of the leftCHild of w as BLACK
								b. Set the color of w as RED
								c. Right-Rotate w
								d. Assign the rightChild of the parent of x to w
						e. If any of the above cases do not occur,
							Case IV:
								a. Set the color of w as the color of the parent of x.
								b. Set the color of the parent of x as BLACK
								c. Set the color of the right child of w as BLACK
								d. Left-Rotate the parent of x.
								e. Set x as the root of the tree
					3. Else the same as above with right changed to left and vice versa
					4. Set the color of x as BLACK
	Red-Black Tree Implementation: Example files

	Red-Black Tree Applications:
		- To implement finite maps
		- To implement Java packages: java.util.TreeMap and java.util.TreeSet
		- To implement Standard Template Libraries (STL) in C++: multiset, map, multimap
		- In Linux Kernel

===========================================================================================================
