Greedy Algorithm:
    - A greedy algorithm is an appraoch for solving a problem by selecting the best option available
      at the moment. It doesn't worry whether the current best result will bring the overall optimal
      result.
    - The algorithm never reverses the earlier decision even if the choice is wrong. It works in a 
      top-down approach.
    - This algorithm may not produce the best result for all the problems. It's because it always
      goes for the local best choice to produce the global best result.
    - However, we can determine if the algorithm can be used with any problem if the problem has
      the following properties.
    1. Greedy Choice property
        - If an optimal solution to the problem can be found by choosing the best choice at each step
          without reconsidering the previous stes once chosen, the problem can be solved using a
          greedy approach. This property is called greedy choice property.
    2. Optimal Substructure:
        - If the optimal overall solution to the problem corresponds to the optimal solution to its
          subproblems, then the problem can be solved using a greedy approach.
    
    Advantages of Greedy Approach:
        - The algorithm is easier to describe.
        - This algorithm can perform better than other algorithms (but, not in all cases)
    
    Drawback of Greedy Approach:
        - As mentioned earlier, the greedy algorithm doesn't always produce the optimal solution.
          This is the major disadvantage of the algorithm.
        - For example, suppose we want to find the longest path in the graph below from root to leaf.
          Let's use the greedy algorithm here.
                20
              2     3
            7  10     1
        Greedy Approach:
            1. Let's start with the root node 20. The weight of the right child is 3 and the weight
               of the left child is 2.
            2. Our problem is to find the largest path. And, the optimal solution at the moment is 3.
               So, the greedy algorithm will choose 3.
            3. Finally the weight of an only child of 3 is 1. This gives us our final result.
               20 + 3 + 1 = 24
            However, it is not the optimal solution. There is another path that carries more weight
            (20 + 2 + 10 = 32) as shown in the image below.
            - Therefore, greedy algorithms do not always give an optimal/feasible solution.
        
    Greedy Algorithm:
        1. To being with, the solution set(containing answers) is empty.
        2. At each step, an item is added to the solution set until a solution is reached.
        3. If the solution set is feasible, the current item is kept.
        4. Else, the item is rejected and never considered again.
    
    Example - Greedy Approach:
        Problem: You have to make a change of an amount using the smallest possible number
                    of coins.
        Amount: $18
        
        Available coins are $5, $2, $1.
        There is no limit to the number of each coin you can use.

        Solution:
            1. Create an empty solution-set = {}. Available coins are {5, 2, 1}
            2. We are supposed to find the sum = 18. Let's start with sum = 0.
            3. Always select the coin with the largest value (ie. 5) until the sum > 18.
                (When we select the largest value at each step, we hope to reach the destination
                faster. This concept is called a greedy choice property)
            4. In the first iteration, solution-set = {5} and sum = 5.
            5. In the second iteration, solution-set = {5, 5} and sum = 10
            6. In the third iteration, solution-set = {5, 5, 5} and sum = 15
            7. In the fourth itertaion, solution-set = {5, 5, 5, 2} and sum = 17.
                (We cannot select 5 here because if we do so, sum = 20 which is greater than 18.
                So, we select the 2nd largest item which is 2.)
            8. Similarly, in the fifth iteration, select 1. Now sum = 18 and solution-set = 
                {5, 5, 5, 2, 1}
        
    Different Types of Greedy Algorithm:
        - Selection Sort
        - Knapsack Problem
        - Minimum Spanning tree
        - Single-Source Shortest Path Problem
        - Job Scheduling Problem
        - Prim's Minimal Spanning Tree Algorithm
        - Kruskal's Minimal Spanning Tree Algorithm
        - Dijkstra's Minimal Spanning Tree Algorithm
        - Huffman Coding
        - Ford-Fulkerson Algorithm

====================================================================================================

Ford-Fulkerson Algorithm:
	https://www.programiz.com/dsa/ford-fulkerson-algorithm
	- Ford-Fulkerson algorithm is a greedy approach for calculating the maximum possible flow
	  in a network or a graph.
	- A term, flow network, is used to describe a network of vertices and edges with a source (S)
	  and a sink (T). Each vertex, except S and T, can receive and send an equal amount of
	  stuff through it. S can only send an T can only receive stuff.
	- We can visualize the understanding of the algorithm using a flow of liquid inside a 
	  network of pipes of different capacities. Each pipe has a certain capacity of liquid it can transfer
	  at an instance. For this algorithm, we are going to find how much liquid can be flowed from the
	  source to the sink at an instance using the network.
	
	Terminologies Used:
		Augmenting Path:
			- It is the path available in a flow network.
		Residual Graph:
			- It represents the flow network that has additional possible flow.
		Residual Capacity:
			- It is the capacity of the edge after subtracting the flow from the maximum capacity.
	
	How Ford-Fulkerson Algorithm works?
		The algorithm follows:
			1. Initialize the flow in all edges to 0.
			2. While there is an augmenting path betwen the source and the sink, add this path to the flow.
			3. Update the residual graph.
		- We can also consider reverse-path if required because if we do not consider them,
		  we may never find a maximum flow.
	
	Ford-Fulkerson Example:
		- The flow of all the edges is 0 at the beginning.
		1. Select any arbitrary path from S to T. In this step, we have selected path S-A-B-T.
		   The minimum capacity among the three edges is 2 (B-T).
		   Based on this, update the flow/capacity for each path.

		2. Select another path S-D-C-T. The minimum capacity among these edges is 3 (S-D).
		   Update the capacities according to this.

		3. Now, let us consider the reverse-path B-D as well.
		   Selecting path S-A-B-D-C-T. The minimum residual capacity among the edges is 1 (D-C).
		   Updating the capacities.
		   The capacity for forward and reverse paths are considered separately.
		
		4. Adding all the flows = 2 + 3 + 1 = 6, which is the maximum possible flow on the flow network.
		- Note that if the capacity for any edge is full, then that path cannot be used.
	
	Ford-Fulkerson Applications
		- Water distribution pipeline
		- Bipartite matching problem
		- Circulation with demands

===========================================================================================================

Dijkstra's Algorithm:
	- It differs from the minimum spanning tree because the shortest distance between two vertices
	  might not include all the vertices of the graph.
	
	How Dijkstra's Algorithm works:
		- Dijkstra's Algorithm works on the basis that any subpath B -> D of the shortest path A -> D 
		  between vertices A and D is also the shortest path between vertices B and D.
		- Dijkstra used this property in the opposite direction ie. we overestimate the distance of
		  each vertex from the starting vertex. Then we visit each node and its neighbors to find the
		  shortest subpath to those neighbors.
	
	Example of Dijkstra's Algorithm: website

	Dijkstra's algorithm pseudocode:
		- We need to maintain the path distance of every vertex. We can store that in an array of
		  size v, where v is the number of vertices.
		- We also want to be abe to get the shortest path, not only know the length of the shortest
		  path. For this, we map each vertex to the vertex that last updated its path length.
		- Once the algorithm is over, we can backtrack from the destination vertex to the source vertex
		  to find the path.
		- A minimum priority queue can be used to efficiently receive the vertex with least path distance.
		function dijkstra(G, S)
			for each vertex V in G
				distance[V] <- infinite
				previous[V] <- NULL
				If V != S, add V to Priority Queue Q
			distance[S] <- 0
			
			while Q IS NOT EMPTY
				U <- Extract MIN from Q
				for each unvisited neighbour V of U
					tempDistance <- distance[U] + edge_weight(U, V)
					if tempDistance < distance[V]
						distance[V] <- tempDistance
						previous[V] <- U
			return distance[], previous[]
		
	Code for Dijkstra's Algorithm: example files

	Dijkstra's Algorithm Complexity:
		Time Complexity: O(E log V)
			where E is the number of edges and V is the number of vertices.
		Space Complexity: O(V)
	
	Dijkstra's Algorithm Applications
		- To find the shortest path
		- In social networking applications 
		- In a telephone network
		- To find the location in a map

==============================================================================================================

Kruskal's Algorithm:
	- Kruskal's Algorithm is a minimum spanning tree algorithm that takes a graph as input and finds the
	  subset of the edges of that graph
		- form a tree that includes every vertex
		- has the minimum sum of weights among all the trees that can be formed from the graph
	
	How Kruskal's algorithm works:
		- It falls under a class of algorithms called greedy algorithms that finds the local optimum
		  in the hopes of finding a global optimum.
		- We start from the edges with the lowest weight and keep adding edges until we reach our goal.
		The steps for implementing Kruskal's algorithm are as follows:
			1. Sort all the edges from low weight to high
			2. Take the edge with the lowest weight and add it to the spanning tree.
			   If adding the edge created a cycle, then reject this edge.
			3. Keep adding edges until we reach all vertices.
		
	Example of Kruskal's Algorithm: website

	Kruskal Algorithm Pseudocode:
		- Any minimum spanning tree algorithm revolves around checking if adding an edge creates a loop or not.
		- The most common way to find this out is an algorithm called Union Find. The Union-Find algorithm
		  divides the vertices into clusters and allows us to check if two vertices belong to the same cluster
		  or not and hence decide whether adding an edge creates a cycle.
		KRUSKAL(G):
		A = ∅
		For each vertex v ∈ G.V:
			MAKE-SET(v)
		For each edge (u, v) ∈ G.E ordered by increasing order by weight(u, v):
			if FIND-SET(u) ≠ FIND-SET(v):       
			A = A ∪ {(u, v)}
			UNION(u, v)
		return A
	
	Kruskal's vs Prim's Algorithm:
		- Prim's algorithm is another popular minimum spanning tree algorithm that uses a different logic
		  to find the MST of a graph. Instead of starting from an edge, Prim's algorithm starts from a
		  vertex and keeps adding lowest-weight edges which aren't in the tree, until all the vertices have been covered.
	
	Kruskal's Algorithm Complexity:
		- The time complexity of Kryskal's Algorithm is O(E log E)
	
	Kruskal's Algorithm Applications:
		- In order to layout electrical wiring
		- In computer network (LAN connection)

============================================================================================================================

