Stack Data Structure:
    https://www.programiz.com/dsa/stack
    - A stack is a linear data structure that follow the principle of Last In First Out (LIFO).
    - Last element inserted inside the stack is removed first.
    - Like a pile of plates on top of another.
        - Put a new plate on top
        - Remove the top plate
    - To remove the bottom plate, you must first remove all the plates on top.

    LIFO Principle of Stack:
        - In programming terms:
            - Putting an item on top of the stack is called: Push
            - Removing an item is called: Pop
        
    Basic Operations of Stack:
        Push: Add an element to the top of a stack
        Pop: Remove an element from the top of a stack
        IsEmpty: Check if the stack is empty
        IsFull: Check if the stack is full
        Peek: Get the value of the top element without removing it
    
    Working of Stack Data Structure:
        1. A pointer called TOP is used to keep track of the top element in the stack.
        2. When initializing the stack, we set its value to -1
           so that we can check if the stack is empty by comparing TOP == -1
        3. On pushing an element, we increase the value of TOP and place the new element
           in the position pointed to by TOP.
        4. On popping an element, we return the element pointed by TOP
           and reduce its value.
        5. Before pyshing, we check if the stack is already full.
        6. Before popping, we check if the stack is already empty.
    
    Stack Implementations: Check website

    Stack Time Complexity:
        For the array-based implementation of a stack,
        the push and pop operations take constant time, i.e. O(1).
    
    Applications of Stack Data Structure:
        To reverse a word:
            Put all the letters in a stack and pop them out.
            Because of the LIFO order of stack, you will get the letters in reverse order.
        In compilers:
            Compilers use the stack to calculate the value of experessions like 2 + 4 / 5 * (7 - 9)
            by converting the experession to prefix or postfix form.
        In browers:
            The back button in a browser saves all the URLs you have visited previously in a stack.
            Each time you visit a new page, it is added on top of the stack.
            When you press the back button, the current URL is removed from the stack,
            and the previous URL is accessed.


Queue Data Structure:
    - Queue is similar to the ticket queue outside a cinema hall, where the first person entering
      the queue is the first person who gets the ticket.
    - First In First Out (FIFO) rule: the item that goes in first is the item tht comes out first.
    - In programming terms,
        - Putting items in the queue is called: enqueue
        - Removing items from the queue is called dequeue.
    
    Basic Operations of Queue:
        Enqueue: Add an ellement to the end of the queue
        Dequeue: Remove an element from the front of the queue
        IsEmpty: Check if the queue is empty
        IsFull: Check if the queue is full
        Peek: Get the value of the front of the queue without removing it.
    
    Working of Queue:
        - Two pointers: FRONT and REAR
        - FRONT: track the first element of the queue
        - REAR: track the last element of the queue
        - Initially, set value of FRONT and REAR to -1

        Enqueue Operation:
            - Check if the queue is full
            - For the first element, set the value of FRONT to 0
            - Increase the REAR index by 1
            - Add the new element in the position pointed to by REAR

        Dequeue Operation:
            - Check if the queue is empty
            - Return the value pointed by FRONT
            - Increase the FRONT index by 1
            - For the last element, reset the values of FRONT and REAR to -1 ***
        
    Queue Implementations: Check website

    Limitations of Queue:
        - After a bit of enqueuing and dequeuing, the size of the queue has been reduced.
        - Can only add forward indexes only when the queue is reset.
        - After REAR reaches last index, if we can store extra elements in the empty sapces (forward spaces)
          we can make use of the empty spaces. This is implemented by a modified queue called the ciruclar queue.
    
    Complexity Analysis:
        - The complexity of enqueue and dequeue operations in a queue using an array is O(1).
        - If you use pop(N) in python code, the complexity might be O(n)
          depending on the position of the item to be popped.
    
    Applications of Queue:
        - CPU scheduling, Disl Scheduling
        - When data is transferred asynchronously between two processes. The queue is used for
          synchronization. For example: IO Buffers, pipes, file IO, etc.
        - Handling of interrupts in real-time systems.
        - Call Center phone systems use Queues to hold people calling them in order.


Types of Queues:
    https://www.programiz.com/dsa/types-of-queue
    Four different types of queues:
        - Simple Queue
        - Circular Queue
        - Priority Queue
        - Double Ended Queue
    
    Simple Queue:
        - Insertion takes place at the rear and removal occurs at the front.
        - It strictly follows the First In First Out (FIFO) rule.
    
    Circular Queue:
        - Last element points to the firs element making a circular link.
        - Better memory utilization.
        - Able to insert elements at the front when the rear is full.
    
    Priority Queue:
        - Special type of queue in which each element is associated with a priority
          and is served according to its priority.
        - If elements with the same priority occur, they are served according to their order in the queue.
        - Insertion occurs based on the arrival of the values and removal occurs based on priority.
    
    Deque (Double Ended Queue):
        - Insertion and removal of elements can be performed from either from the front or rear.
        - Thus, it does not follow the FIFO (First In First Out) rule.


Circular Queue Data Structure:
    https://www.programiz.com/dsa/circular-queue
    - Extended version of a regular queue where the last element is connected to the first element.
    - Forms a circle-like structure
    - Solved the major limitation of a normal queue:
        - After a bit of insertion and deletion, there will be non-usable empty space.
        - Indexes that have been used can only be used again after resetting hte queue.
        - Reduces actual size of the queue.
    
    How Circular Queue Works:
        - Works by the process of circular increment.
        - When trying to increment the pointer and we reach end of the queue,
          we start from the beginning of the queue.
        if REAR + 1 == 5 (overflow!), REAR = (REAR + 1)%5 = 0 (start of queue)
        - Here the ciruclar increment is performed by modulo divison with the queue size.

    Circular Queue Operations:
        - Two pointers FRONT and REAR
        - FRONT track the first element of the queue.
        - REAR track the last elements of the queue.
        - Initially, set value of FRONT and REAR to -1

        1. Enqueue Operation
            - Check if the queue is full
            - For the first element, set value of FRONT to 0
            - Circularly increase the REAR index by 1 (if the rear reaches end, next is at start)
            - Add the new element in the position pointed to by REAR
        
        2. Dequeue Operation
            - Check if the queue is empty
            - Return the value pointed by FRONT
            - Circularly increase the FRONT index by 1
            - for the last element, reset the values of FRONT and REAR to -1

        Check for full queue has a new additional case:
            Case 1: FRONT = 0 && REAR == SIZE - 1
            Case 2: FRONT = REAR + 1
            - Case 2 happens when REAR starts from 0 due to circular increment
              and when its value is just 1 less than FRONT, the queue is full.
    
    Circular Queue Implementations: Check website

    Circular Queue Complexity Analysis:
        - The complexity of the enqueue and dequeue operations of a circular queue is
          O(1) for array implementations.
    
    Applciations of Circular Queue:
        - CPU scheduling
        - Memory management
        - Traffic management


Priority Queue:
    - A special type of queue in which each element is associated with a priority value.
    - Elements are served on the basis of their priority, higher priority elements are served first.
    - If elements of the same priority occur, they are served according to their order in the queue.

    Assigning Priority Value:
        - Generally, value of element itself is considered for assigning the priority.
        Example:
            - Elements with highest value is considered the highest priority element.
            - Elements with lowest value can also be considered as highest priority element.
        - Can set priorities according to our needs.
    
    Difference between Priority Queue and Normal Queue:
        - In a queue, FIFO is implemented
        - In a priority queue, values are removed on the basis of priority.
        - Element with the highest priority is removed first.
    
    Implementation of Priority Queue:
        - Priority queue can be implemented using an array, a linked list, a heap data structure, or a binary search tree.
        - Heap data structure provides an efficient implementation of priority queues.
        - Max-heap is implemented.

        1. Inserting an element into the priority queue
            - Insert new element at the end of the tree
            - Heapify tree
            Example: 
                If there is no node, create a new node
                Else (a node is already present), insert the newNode at the end (last node from left to right)
                Heapify the array
            - For min-heap, the above algorithm is modified so that parentNode is always smaller than newNode
        
        2. Deleting an element from the priority queue
            - Select element to be deleted
            - Swap it with last element
            - Remove last element
            - Heapify tree
            Example:
                - If nodeToBeDeleted is the leafNode, remove the node
                - Else, swap nodeToBeDeleted with the lastLeafNode, remove noteToBeDeleted
                - Heapify the array
            - For min-heap, the above algorithm is modified so that both childNodes are smaller than currentNode
        
        3. Peeking from the priority queue (min/max)
            - Peek operation returns the maximum element from Max Heap or minimum element from Min Heao without deleting the node.
            - For both Max-heap and min-heap:
                return rootNode
        
        4. Extract-Max/Min from the Priority Queue
            - Extarct-max returns the max value after removing it from max-heap and vice versa for min-heap.
        
        Check Python Implementation in code files.

Deque Data Structure:
    https://www.programiz.com/dsa/deque
    - Deque or Double Ended Queue is a type of queue in which insertion and removal of elements can either be performed
      from the front of the rear.
    - It does not follow the FIFO rule (First In First Out)

    Types of Deque:
        - Input Restrictred Deque: Input is restricted at a single end but allows deletion at both the ends.
        - Output Restricted Deque: Output is restricted at a single end but allows insertion at both the ends.
    
    Operations on a Deque:
        1. Take an array (deque) of size n.
        2. Set two pointers at the first position and set front = -1 and rear = 0

        1. Insert at the Front
            1. Check the position of front
            2. If front < 1, reinitialize front = n - 1 (last index)
            3. Else, decrease front by 1
            4. Add the new key 5 into array[front]
        
        2. Insert at the Rear
            1. Check if the array is full.
            2. If the deque is full, reinitialze rear = 0
            3. Else, increase rear by 1
            4. Add the new key 5 into array[rear]

        3. Delete from the Front
            1. Check if the deque is empty.
            2. If the deque is empty (front = -1), deletion cannot be performed (underflow condition)
            3. If the deque has only one element (front = rear), set front = -1 and rear = -1
            4. Else if front is at the end (front = n - 1), set go to the front front = 0
            5. Else, front = front + 1
        
        4. Delete from the Rear
            1. Check if the deque is empty
            2. If the deque is empty (front = -1), deletion cannot be performed (underflow)
            3. If the deque has only one element (front = rear), set front = -1 and rear = -1
            4. Else if rear is at the front (rear = 0), set go to the front rear = n - 1
            5. Else, rear = rear - 1
        
        5. Check Empty: This operation checks if the deque is empty. If front = -1, the deque is empty.
        6. Check Full: This operation checks if the deque if full. If front = 0 and rear = n - 1,
                       OR front = rear + 1, the deque is full.
    
    Deque Implementation: Check implementation example files.

    Time Complexity: The time complexity of all the above operaitons is constant i.e. O(1).

    Applications of Deque Data Structure:
        1. In undo operations on software.
        2. To store history in browsers.
        3. For implementing both stacks and queues.
        